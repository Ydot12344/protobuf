// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/lazy_packed_field_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/lazy_packed_field.h"
#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
namespace protobuf_unittest {
class BigProto;
struct BigProtoDefaultTypeInternal;
extern BigProtoDefaultTypeInternal _BigProto_default_instance_;
class BigProtoLazy;
struct BigProtoLazyDefaultTypeInternal;
extern BigProtoLazyDefaultTypeInternal _BigProtoLazy_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Folder;
struct FolderDefaultTypeInternal;
extern FolderDefaultTypeInternal _Folder_default_instance_;
class FolderLazy;
struct FolderLazyDefaultTypeInternal;
extern FolderLazyDefaultTypeInternal _FolderLazy_default_instance_;
class FolderWraper;
struct FolderWraperDefaultTypeInternal;
extern FolderWraperDefaultTypeInternal _FolderWraper_default_instance_;
class LazyFolderLazyWraper;
struct LazyFolderLazyWraperDefaultTypeInternal;
extern LazyFolderLazyWraperDefaultTypeInternal _LazyFolderLazyWraper_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template <>
::protobuf_unittest::BigProto* Arena::CreateMaybeMessage<::protobuf_unittest::BigProto>(Arena*);
template <>
::protobuf_unittest::BigProtoLazy* Arena::CreateMaybeMessage<::protobuf_unittest::BigProtoLazy>(Arena*);
template <>
::protobuf_unittest::File* Arena::CreateMaybeMessage<::protobuf_unittest::File>(Arena*);
template <>
::protobuf_unittest::Folder* Arena::CreateMaybeMessage<::protobuf_unittest::Folder>(Arena*);
template <>
::protobuf_unittest::FolderLazy* Arena::CreateMaybeMessage<::protobuf_unittest::FolderLazy>(Arena*);
template <>
::protobuf_unittest::FolderWraper* Arena::CreateMaybeMessage<::protobuf_unittest::FolderWraper>(Arena*);
template <>
::protobuf_unittest::LazyFolderLazyWraper* Arena::CreateMaybeMessage<::protobuf_unittest::LazyFolderLazyWraper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace protobuf_unittest {

// ===================================================================


// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtensionFieldNumber = 2,
    kPathFieldNumber = 3,
    kByteSizeFieldNumber = 4,
  };
  // optional string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Extension = 2;
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;
  public:
  void clear_extension();
  const std::string& extension() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extension(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extension();
  PROTOBUF_NODISCARD std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // optional string Path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional int32 ByteSize = 4;
  bool has_bytesize() const;
  private:
  bool _internal_has_bytesize() const;
  public:
  void clear_bytesize();
  ::int32_t bytesize() const;
  void set_bytesize(::int32_t value);
  private:
  ::int32_t _internal_bytesize() const;
  void _internal_set_bytesize(::int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::int32_t bytesize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};// -------------------------------------------------------------------

class Folder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Folder) */ {
 public:
  inline Folder() : Folder(nullptr) {}
  ~Folder() override;
  explicit PROTOBUF_CONSTEXPR Folder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Folder(const Folder& from);
  Folder(Folder&& from) noexcept
    : Folder() {
    *this = ::std::move(from);
  }

  inline Folder& operator=(const Folder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Folder& operator=(Folder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Folder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Folder* internal_default_instance() {
    return reinterpret_cast<const Folder*>(
               &_Folder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Folder& a, Folder& b) {
    a.Swap(&b);
  }
  inline void Swap(Folder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Folder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Folder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Folder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Folder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Folder& from) {
    Folder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Folder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.Folder";
  }
  protected:
  explicit Folder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kNameFieldNumber = 1,
    kPathFieldNumber = 3,
    kByteSizeFieldNumber = 4,
  };
  // repeated .protobuf_unittest.File Files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::protobuf_unittest::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::File >*
      mutable_files();
  private:
  const ::protobuf_unittest::File& _internal_files(int index) const;
  ::protobuf_unittest::File* _internal_add_files();
  public:
  const ::protobuf_unittest::File& files(int index) const;
  ::protobuf_unittest::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::File >&
      files() const;

  // optional string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional uint32 ByteSize = 4;
  bool has_bytesize() const;
  private:
  bool _internal_has_bytesize() const;
  public:
  void clear_bytesize();
  ::uint32_t bytesize() const;
  void set_bytesize(::uint32_t value);
  private:
  ::uint32_t _internal_bytesize() const;
  void _internal_set_bytesize(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.Folder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::File > files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::uint32_t bytesize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};// -------------------------------------------------------------------

class FolderLazy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.FolderLazy) */ {
 public:
  inline FolderLazy() : FolderLazy(nullptr) {}
  ~FolderLazy() override;
  explicit PROTOBUF_CONSTEXPR FolderLazy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FolderLazy(const FolderLazy& from);
  FolderLazy(FolderLazy&& from) noexcept
    : FolderLazy() {
    *this = ::std::move(from);
  }

  inline FolderLazy& operator=(const FolderLazy& from) {
    CopyFrom(from);
    return *this;
  }
  inline FolderLazy& operator=(FolderLazy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FolderLazy& default_instance() {
    return *internal_default_instance();
  }
  static inline const FolderLazy* internal_default_instance() {
    return reinterpret_cast<const FolderLazy*>(
               &_FolderLazy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FolderLazy& a, FolderLazy& b) {
    a.Swap(&b);
  }
  inline void Swap(FolderLazy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FolderLazy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FolderLazy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FolderLazy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FolderLazy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FolderLazy& from) {
    FolderLazy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FolderLazy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.FolderLazy";
  }
  protected:
  explicit FolderLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kNameFieldNumber = 1,
    kPathFieldNumber = 3,
    kByteSizeFieldNumber = 4,
  };
  // repeated .protobuf_unittest.File Files = 2 [lazy_pack = true];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File> >*
      mutable_files();
  private:
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>& _internal_files(int index) const;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* _internal_add_files();
  public:
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>& files(int index) const;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File> >&
      files() const;

  // optional string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional uint32 ByteSize = 4;
  bool has_bytesize() const;
  private:
  bool _internal_has_bytesize() const;
  public:
  void clear_bytesize();
  ::uint32_t bytesize() const;
  void set_bytesize(::uint32_t value);
  private:
  ::uint32_t _internal_bytesize() const;
  void _internal_set_bytesize(::uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.FolderLazy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File> > files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::uint32_t bytesize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};// -------------------------------------------------------------------

class BigProtoLazy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.BigProtoLazy) */ {
 public:
  inline BigProtoLazy() : BigProtoLazy(nullptr) {}
  ~BigProtoLazy() override;
  explicit PROTOBUF_CONSTEXPR BigProtoLazy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigProtoLazy(const BigProtoLazy& from);
  BigProtoLazy(BigProtoLazy&& from) noexcept
    : BigProtoLazy() {
    *this = ::std::move(from);
  }

  inline BigProtoLazy& operator=(const BigProtoLazy& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigProtoLazy& operator=(BigProtoLazy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigProtoLazy& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigProtoLazy* internal_default_instance() {
    return reinterpret_cast<const BigProtoLazy*>(
               &_BigProtoLazy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BigProtoLazy& a, BigProtoLazy& b) {
    a.Swap(&b);
  }
  inline void Swap(BigProtoLazy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigProtoLazy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigProtoLazy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigProtoLazy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigProtoLazy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigProtoLazy& from) {
    BigProtoLazy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigProtoLazy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.BigProtoLazy";
  }
  protected:
  explicit BigProtoLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDataFieldNumber = 1,
    kEndDataFieldNumber = 3,
    kFolderFieldNumber = 2,
  };
  // optional string start_data = 1;
  bool has_start_data() const;
  private:
  bool _internal_has_start_data() const;
  public:
  void clear_start_data();
  const std::string& start_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_data();
  PROTOBUF_NODISCARD std::string* release_start_data();
  void set_allocated_start_data(std::string* start_data);
  private:
  const std::string& _internal_start_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_data(const std::string& value);
  std::string* _internal_mutable_start_data();
  public:

  // optional string end_data = 3;
  bool has_end_data() const;
  private:
  bool _internal_has_end_data() const;
  public:
  void clear_end_data();
  const std::string& end_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_data();
  PROTOBUF_NODISCARD std::string* release_end_data();
  void set_allocated_end_data(std::string* end_data);
  private:
  const std::string& _internal_end_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_data(const std::string& value);
  std::string* _internal_mutable_end_data();
  public:

  // optional .protobuf_unittest.Folder Folder = 2 [lazy_pack = true];
  bool has_folder() const;
  private:
  bool _internal_has_folder() const;
  public:
  void clear_folder();
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>& folder() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* release_folder();
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* mutable_folder();
  void set_allocated_folder(::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* folder);
  private:
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>& _internal_folder() const;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* _internal_mutable_folder();
  public:
  void unsafe_arena_set_allocated_folder(
      ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* folder);
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* unsafe_arena_release_folder();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.BigProtoLazy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_data_;
    ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* folder_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};// -------------------------------------------------------------------

class BigProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.BigProto) */ {
 public:
  inline BigProto() : BigProto(nullptr) {}
  ~BigProto() override;
  explicit PROTOBUF_CONSTEXPR BigProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigProto(const BigProto& from);
  BigProto(BigProto&& from) noexcept
    : BigProto() {
    *this = ::std::move(from);
  }

  inline BigProto& operator=(const BigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigProto& operator=(BigProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigProto* internal_default_instance() {
    return reinterpret_cast<const BigProto*>(
               &_BigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BigProto& a, BigProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BigProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigProto& from) {
    BigProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.BigProto";
  }
  protected:
  explicit BigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDataFieldNumber = 1,
    kEndDataFieldNumber = 3,
    kFolderFieldNumber = 2,
  };
  // optional string start_data = 1;
  bool has_start_data() const;
  private:
  bool _internal_has_start_data() const;
  public:
  void clear_start_data();
  const std::string& start_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_data();
  PROTOBUF_NODISCARD std::string* release_start_data();
  void set_allocated_start_data(std::string* start_data);
  private:
  const std::string& _internal_start_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_data(const std::string& value);
  std::string* _internal_mutable_start_data();
  public:

  // optional string end_data = 3;
  bool has_end_data() const;
  private:
  bool _internal_has_end_data() const;
  public:
  void clear_end_data();
  const std::string& end_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_data();
  PROTOBUF_NODISCARD std::string* release_end_data();
  void set_allocated_end_data(std::string* end_data);
  private:
  const std::string& _internal_end_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_data(const std::string& value);
  std::string* _internal_mutable_end_data();
  public:

  // optional .protobuf_unittest.Folder Folder = 2;
  bool has_folder() const;
  private:
  bool _internal_has_folder() const;
  public:
  void clear_folder();
  const ::protobuf_unittest::Folder& folder() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::Folder* release_folder();
  ::protobuf_unittest::Folder* mutable_folder();
  void set_allocated_folder(::protobuf_unittest::Folder* folder);
  private:
  const ::protobuf_unittest::Folder& _internal_folder() const;
  ::protobuf_unittest::Folder* _internal_mutable_folder();
  public:
  void unsafe_arena_set_allocated_folder(
      ::protobuf_unittest::Folder* folder);
  ::protobuf_unittest::Folder* unsafe_arena_release_folder();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.BigProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_data_;
    ::protobuf_unittest::Folder* folder_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};// -------------------------------------------------------------------

class FolderWraper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.FolderWraper) */ {
 public:
  inline FolderWraper() : FolderWraper(nullptr) {}
  ~FolderWraper() override;
  explicit PROTOBUF_CONSTEXPR FolderWraper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FolderWraper(const FolderWraper& from);
  FolderWraper(FolderWraper&& from) noexcept
    : FolderWraper() {
    *this = ::std::move(from);
  }

  inline FolderWraper& operator=(const FolderWraper& from) {
    CopyFrom(from);
    return *this;
  }
  inline FolderWraper& operator=(FolderWraper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FolderWraper& default_instance() {
    return *internal_default_instance();
  }
  static inline const FolderWraper* internal_default_instance() {
    return reinterpret_cast<const FolderWraper*>(
               &_FolderWraper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FolderWraper& a, FolderWraper& b) {
    a.Swap(&b);
  }
  inline void Swap(FolderWraper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FolderWraper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FolderWraper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FolderWraper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FolderWraper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FolderWraper& from) {
    FolderWraper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FolderWraper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.FolderWraper";
  }
  protected:
  explicit FolderWraper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDataFieldNumber = 1,
    kEndDataFieldNumber = 3,
    kFolderFieldNumber = 2,
  };
  // optional string start_data = 1;
  bool has_start_data() const;
  private:
  bool _internal_has_start_data() const;
  public:
  void clear_start_data();
  const std::string& start_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_data();
  PROTOBUF_NODISCARD std::string* release_start_data();
  void set_allocated_start_data(std::string* start_data);
  private:
  const std::string& _internal_start_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_data(const std::string& value);
  std::string* _internal_mutable_start_data();
  public:

  // optional string end_data = 3;
  bool has_end_data() const;
  private:
  bool _internal_has_end_data() const;
  public:
  void clear_end_data();
  const std::string& end_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_data();
  PROTOBUF_NODISCARD std::string* release_end_data();
  void set_allocated_end_data(std::string* end_data);
  private:
  const std::string& _internal_end_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_data(const std::string& value);
  std::string* _internal_mutable_end_data();
  public:

  // optional .protobuf_unittest.Folder Folder = 2;
  bool has_folder() const;
  private:
  bool _internal_has_folder() const;
  public:
  void clear_folder();
  const ::protobuf_unittest::Folder& folder() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::Folder* release_folder();
  ::protobuf_unittest::Folder* mutable_folder();
  void set_allocated_folder(::protobuf_unittest::Folder* folder);
  private:
  const ::protobuf_unittest::Folder& _internal_folder() const;
  ::protobuf_unittest::Folder* _internal_mutable_folder();
  public:
  void unsafe_arena_set_allocated_folder(
      ::protobuf_unittest::Folder* folder);
  ::protobuf_unittest::Folder* unsafe_arena_release_folder();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.FolderWraper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_data_;
    ::protobuf_unittest::Folder* folder_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};// -------------------------------------------------------------------

class LazyFolderLazyWraper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.LazyFolderLazyWraper) */ {
 public:
  inline LazyFolderLazyWraper() : LazyFolderLazyWraper(nullptr) {}
  ~LazyFolderLazyWraper() override;
  explicit PROTOBUF_CONSTEXPR LazyFolderLazyWraper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LazyFolderLazyWraper(const LazyFolderLazyWraper& from);
  LazyFolderLazyWraper(LazyFolderLazyWraper&& from) noexcept
    : LazyFolderLazyWraper() {
    *this = ::std::move(from);
  }

  inline LazyFolderLazyWraper& operator=(const LazyFolderLazyWraper& from) {
    CopyFrom(from);
    return *this;
  }
  inline LazyFolderLazyWraper& operator=(LazyFolderLazyWraper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LazyFolderLazyWraper& default_instance() {
    return *internal_default_instance();
  }
  static inline const LazyFolderLazyWraper* internal_default_instance() {
    return reinterpret_cast<const LazyFolderLazyWraper*>(
               &_LazyFolderLazyWraper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LazyFolderLazyWraper& a, LazyFolderLazyWraper& b) {
    a.Swap(&b);
  }
  inline void Swap(LazyFolderLazyWraper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LazyFolderLazyWraper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LazyFolderLazyWraper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LazyFolderLazyWraper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LazyFolderLazyWraper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LazyFolderLazyWraper& from) {
    LazyFolderLazyWraper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LazyFolderLazyWraper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.LazyFolderLazyWraper";
  }
  protected:
  explicit LazyFolderLazyWraper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDataFieldNumber = 1,
    kEndDataFieldNumber = 3,
    kFolderFieldNumber = 2,
  };
  // optional string start_data = 1;
  bool has_start_data() const;
  private:
  bool _internal_has_start_data() const;
  public:
  void clear_start_data();
  const std::string& start_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_data();
  PROTOBUF_NODISCARD std::string* release_start_data();
  void set_allocated_start_data(std::string* start_data);
  private:
  const std::string& _internal_start_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_data(const std::string& value);
  std::string* _internal_mutable_start_data();
  public:

  // optional string end_data = 3;
  bool has_end_data() const;
  private:
  bool _internal_has_end_data() const;
  public:
  void clear_end_data();
  const std::string& end_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_data();
  PROTOBUF_NODISCARD std::string* release_end_data();
  void set_allocated_end_data(std::string* end_data);
  private:
  const std::string& _internal_end_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_data(const std::string& value);
  std::string* _internal_mutable_end_data();
  public:

  // optional .protobuf_unittest.FolderLazy Folder = 2 [lazy_pack = true];
  bool has_folder() const;
  private:
  bool _internal_has_folder() const;
  public:
  void clear_folder();
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>& folder() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* release_folder();
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* mutable_folder();
  void set_allocated_folder(::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* folder);
  private:
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>& _internal_folder() const;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* _internal_mutable_folder();
  public:
  void unsafe_arena_set_allocated_folder(
      ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* folder);
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* unsafe_arena_release_folder();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.LazyFolderLazyWraper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_data_;
    ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* folder_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
};
// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// File

// optional string Name = 1;
inline bool File::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_name() const {
  return _internal_has_name();
}
inline void File::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.File.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.File.Name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.File.Name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return _impl_.name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.File.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.File.Name)
}

// optional string Extension = 2;
inline bool File::_internal_has_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool File::has_extension() const {
  return _internal_has_extension();
}
inline void File::clear_extension() {
  _impl_.extension_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& File::extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.File.Extension)
  return _internal_extension();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_extension(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.extension_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.File.Extension)
}
inline std::string* File::mutable_extension() {
  std::string* _s = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.File.Extension)
  return _s;
}
inline const std::string& File::_internal_extension() const {
  return _impl_.extension_.Get();
}
inline void File::_internal_set_extension(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.extension_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_extension() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.extension_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_extension() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.File.Extension)
  if (!_internal_has_extension()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.extension_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extension_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void File::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.extension_.SetAllocated(extension, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extension_.IsDefault()) {
    _impl_.extension_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.File.Extension)
}

// optional string Path = 3;
inline bool File::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool File::has_path() const {
  return _internal_has_path();
}
inline void File::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& File::path() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.File.Path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.File.Path)
}
inline std::string* File::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.File.Path)
  return _s;
}
inline const std::string& File::_internal_path() const {
  return _impl_.path_.Get();
}
inline void File::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_path() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.File.Path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void File::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.File.Path)
}

// optional int32 ByteSize = 4;
inline bool File::_internal_has_bytesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool File::has_bytesize() const {
  return _internal_has_bytesize();
}
inline void File::clear_bytesize() {
  _impl_.bytesize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t File::_internal_bytesize() const {
  return _impl_.bytesize_;
}
inline ::int32_t File::bytesize() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.File.ByteSize)
  return _internal_bytesize();
}
inline void File::_internal_set_bytesize(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bytesize_ = value;
}
inline void File::set_bytesize(::int32_t value) {
  _internal_set_bytesize(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.File.ByteSize)
}

// -------------------------------------------------------------------

// Folder

// optional string Name = 1;
inline bool Folder::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Folder::has_name() const {
  return _internal_has_name();
}
inline void Folder::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Folder::name() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Folder.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Folder::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.Folder.Name)
}
inline std::string* Folder::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.Folder.Name)
  return _s;
}
inline const std::string& Folder::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Folder::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Folder::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Folder::release_name() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.Folder.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Folder::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.Folder.Name)
}

// repeated .protobuf_unittest.File Files = 2;
inline int Folder::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int Folder::files_size() const {
  return _internal_files_size();
}
inline void Folder::clear_files() {
  _impl_.files_.Clear();
}
inline ::protobuf_unittest::File* Folder::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.Folder.Files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::File >*
Folder::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.Folder.Files)
  return &_impl_.files_;
}
inline const ::protobuf_unittest::File& Folder::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::protobuf_unittest::File& Folder::files(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Folder.Files)
  return _internal_files(index);
}
inline ::protobuf_unittest::File* Folder::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::protobuf_unittest::File* Folder::add_files() {
  ::protobuf_unittest::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:protobuf_unittest.Folder.Files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::File >&
Folder::files() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.Folder.Files)
  return _impl_.files_;
}

// optional string Path = 3;
inline bool Folder::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Folder::has_path() const {
  return _internal_has_path();
}
inline void Folder::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Folder::path() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Folder.Path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Folder::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.Folder.Path)
}
inline std::string* Folder::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.Folder.Path)
  return _s;
}
inline const std::string& Folder::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Folder::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Folder::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Folder::release_path() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.Folder.Path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Folder::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.Folder.Path)
}

// optional uint32 ByteSize = 4;
inline bool Folder::_internal_has_bytesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Folder::has_bytesize() const {
  return _internal_has_bytesize();
}
inline void Folder::clear_bytesize() {
  _impl_.bytesize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Folder::_internal_bytesize() const {
  return _impl_.bytesize_;
}
inline ::uint32_t Folder::bytesize() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Folder.ByteSize)
  return _internal_bytesize();
}
inline void Folder::_internal_set_bytesize(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bytesize_ = value;
}
inline void Folder::set_bytesize(::uint32_t value) {
  _internal_set_bytesize(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.Folder.ByteSize)
}

// -------------------------------------------------------------------

// FolderLazy

// optional string Name = 1;
inline bool FolderLazy::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FolderLazy::has_name() const {
  return _internal_has_name();
}
inline void FolderLazy::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FolderLazy::name() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderLazy.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FolderLazy::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.FolderLazy.Name)
}
inline std::string* FolderLazy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.FolderLazy.Name)
  return _s;
}
inline const std::string& FolderLazy::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FolderLazy::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FolderLazy::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FolderLazy::release_name() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.FolderLazy.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FolderLazy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.FolderLazy.Name)
}

// repeated .protobuf_unittest.File Files = 2 [lazy_pack = true];
inline int FolderLazy::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int FolderLazy::files_size() const {
  return _internal_files_size();
}
inline void FolderLazy::clear_files() {
  _impl_.files_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* FolderLazy::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.FolderLazy.Files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File> >*
FolderLazy::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.FolderLazy.Files)
  return &_impl_.files_;
}
inline const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>& FolderLazy::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>& FolderLazy::files(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderLazy.Files)
  return _internal_files(index);
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* FolderLazy::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* FolderLazy::add_files() {
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File>* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:protobuf_unittest.FolderLazy.Files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::File> >&
FolderLazy::files() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.FolderLazy.Files)
  return _impl_.files_;
}

// optional string Path = 3;
inline bool FolderLazy::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FolderLazy::has_path() const {
  return _internal_has_path();
}
inline void FolderLazy::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FolderLazy::path() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderLazy.Path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FolderLazy::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.FolderLazy.Path)
}
inline std::string* FolderLazy::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.FolderLazy.Path)
  return _s;
}
inline const std::string& FolderLazy::_internal_path() const {
  return _impl_.path_.Get();
}
inline void FolderLazy::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* FolderLazy::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* FolderLazy::release_path() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.FolderLazy.Path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FolderLazy::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.FolderLazy.Path)
}

// optional uint32 ByteSize = 4;
inline bool FolderLazy::_internal_has_bytesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FolderLazy::has_bytesize() const {
  return _internal_has_bytesize();
}
inline void FolderLazy::clear_bytesize() {
  _impl_.bytesize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FolderLazy::_internal_bytesize() const {
  return _impl_.bytesize_;
}
inline ::uint32_t FolderLazy::bytesize() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderLazy.ByteSize)
  return _internal_bytesize();
}
inline void FolderLazy::_internal_set_bytesize(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bytesize_ = value;
}
inline void FolderLazy::set_bytesize(::uint32_t value) {
  _internal_set_bytesize(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.FolderLazy.ByteSize)
}

// -------------------------------------------------------------------

// BigProtoLazy

// optional string start_data = 1;
inline bool BigProtoLazy::_internal_has_start_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BigProtoLazy::has_start_data() const {
  return _internal_has_start_data();
}
inline void BigProtoLazy::clear_start_data() {
  _impl_.start_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BigProtoLazy::start_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BigProtoLazy.start_data)
  return _internal_start_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigProtoLazy::set_start_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.start_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.BigProtoLazy.start_data)
}
inline std::string* BigProtoLazy::mutable_start_data() {
  std::string* _s = _internal_mutable_start_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.BigProtoLazy.start_data)
  return _s;
}
inline const std::string& BigProtoLazy::_internal_start_data() const {
  return _impl_.start_data_.Get();
}
inline void BigProtoLazy::_internal_set_start_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BigProtoLazy::_internal_mutable_start_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.start_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BigProtoLazy::release_start_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.BigProtoLazy.start_data)
  if (!_internal_has_start_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.start_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BigProtoLazy::set_allocated_start_data(std::string* start_data) {
  if (start_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_data_.SetAllocated(start_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_data_.IsDefault()) {
    _impl_.start_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.BigProtoLazy.start_data)
}

// optional .protobuf_unittest.Folder Folder = 2 [lazy_pack = true];
inline bool BigProtoLazy::_internal_has_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.folder_ != nullptr);
  return value;
}
inline bool BigProtoLazy::has_folder() const {
  return _internal_has_folder();
}
inline void BigProtoLazy::clear_folder() {
  if (_impl_.folder_ != nullptr) _impl_.folder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>& BigProtoLazy::_internal_folder() const {
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* p = _impl_.folder_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>&>(
      ::protobuf_unittest::_Folder_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>& BigProtoLazy::folder() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BigProtoLazy.Folder)
  return _internal_folder();
}
inline void BigProtoLazy::unsafe_arena_set_allocated_folder(
    ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* folder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.folder_);
  }
  _impl_.folder_ = folder;
  if (folder) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.BigProtoLazy.Folder)
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* BigProtoLazy::release_folder() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* BigProtoLazy::unsafe_arena_release_folder() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.BigProtoLazy.Folder)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* BigProtoLazy::_internal_mutable_folder() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>>(GetArenaForAllocation());
    _impl_.folder_ = p;
  }
  return _impl_.folder_;
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* BigProtoLazy::mutable_folder() {
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* _msg = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.BigProtoLazy.Folder)
  return _msg;
}
inline void BigProtoLazy::set_allocated_folder(::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>* folder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.folder_;
  }
  if (folder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(folder);
    if (message_arena != submessage_arena) {
      folder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.BigProtoLazy.Folder)
}

// optional string end_data = 3;
inline bool BigProtoLazy::_internal_has_end_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BigProtoLazy::has_end_data() const {
  return _internal_has_end_data();
}
inline void BigProtoLazy::clear_end_data() {
  _impl_.end_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BigProtoLazy::end_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BigProtoLazy.end_data)
  return _internal_end_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigProtoLazy::set_end_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.end_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.BigProtoLazy.end_data)
}
inline std::string* BigProtoLazy::mutable_end_data() {
  std::string* _s = _internal_mutable_end_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.BigProtoLazy.end_data)
  return _s;
}
inline const std::string& BigProtoLazy::_internal_end_data() const {
  return _impl_.end_data_.Get();
}
inline void BigProtoLazy::_internal_set_end_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BigProtoLazy::_internal_mutable_end_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.end_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BigProtoLazy::release_end_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.BigProtoLazy.end_data)
  if (!_internal_has_end_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.end_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BigProtoLazy::set_allocated_end_data(std::string* end_data) {
  if (end_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_data_.SetAllocated(end_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_data_.IsDefault()) {
    _impl_.end_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.BigProtoLazy.end_data)
}

// -------------------------------------------------------------------

// BigProto

// optional string start_data = 1;
inline bool BigProto::_internal_has_start_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BigProto::has_start_data() const {
  return _internal_has_start_data();
}
inline void BigProto::clear_start_data() {
  _impl_.start_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BigProto::start_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BigProto.start_data)
  return _internal_start_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigProto::set_start_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.start_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.BigProto.start_data)
}
inline std::string* BigProto::mutable_start_data() {
  std::string* _s = _internal_mutable_start_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.BigProto.start_data)
  return _s;
}
inline const std::string& BigProto::_internal_start_data() const {
  return _impl_.start_data_.Get();
}
inline void BigProto::_internal_set_start_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BigProto::_internal_mutable_start_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.start_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BigProto::release_start_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.BigProto.start_data)
  if (!_internal_has_start_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.start_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BigProto::set_allocated_start_data(std::string* start_data) {
  if (start_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_data_.SetAllocated(start_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_data_.IsDefault()) {
    _impl_.start_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.BigProto.start_data)
}

// optional .protobuf_unittest.Folder Folder = 2;
inline bool BigProto::_internal_has_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.folder_ != nullptr);
  return value;
}
inline bool BigProto::has_folder() const {
  return _internal_has_folder();
}
inline void BigProto::clear_folder() {
  if (_impl_.folder_ != nullptr) _impl_.folder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::Folder& BigProto::_internal_folder() const {
  const ::protobuf_unittest::Folder* p = _impl_.folder_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::Folder&>(
      ::protobuf_unittest::_Folder_default_instance_);
}
inline const ::protobuf_unittest::Folder& BigProto::folder() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BigProto.Folder)
  return _internal_folder();
}
inline void BigProto::unsafe_arena_set_allocated_folder(
    ::protobuf_unittest::Folder* folder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.folder_);
  }
  _impl_.folder_ = folder;
  if (folder) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.BigProto.Folder)
}
inline ::protobuf_unittest::Folder* BigProto::release_folder() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::Folder* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::Folder* BigProto::unsafe_arena_release_folder() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.BigProto.Folder)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::Folder* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::Folder* BigProto::_internal_mutable_folder() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::Folder>(GetArenaForAllocation());
    _impl_.folder_ = p;
  }
  return _impl_.folder_;
}
inline ::protobuf_unittest::Folder* BigProto::mutable_folder() {
  ::protobuf_unittest::Folder* _msg = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.BigProto.Folder)
  return _msg;
}
inline void BigProto::set_allocated_folder(::protobuf_unittest::Folder* folder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.folder_;
  }
  if (folder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(folder);
    if (message_arena != submessage_arena) {
      folder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.BigProto.Folder)
}

// optional string end_data = 3;
inline bool BigProto::_internal_has_end_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BigProto::has_end_data() const {
  return _internal_has_end_data();
}
inline void BigProto::clear_end_data() {
  _impl_.end_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BigProto::end_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BigProto.end_data)
  return _internal_end_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigProto::set_end_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.end_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.BigProto.end_data)
}
inline std::string* BigProto::mutable_end_data() {
  std::string* _s = _internal_mutable_end_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.BigProto.end_data)
  return _s;
}
inline const std::string& BigProto::_internal_end_data() const {
  return _impl_.end_data_.Get();
}
inline void BigProto::_internal_set_end_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BigProto::_internal_mutable_end_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.end_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BigProto::release_end_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.BigProto.end_data)
  if (!_internal_has_end_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.end_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BigProto::set_allocated_end_data(std::string* end_data) {
  if (end_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_data_.SetAllocated(end_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_data_.IsDefault()) {
    _impl_.end_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.BigProto.end_data)
}

// -------------------------------------------------------------------

// FolderWraper

// optional string start_data = 1;
inline bool FolderWraper::_internal_has_start_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FolderWraper::has_start_data() const {
  return _internal_has_start_data();
}
inline void FolderWraper::clear_start_data() {
  _impl_.start_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FolderWraper::start_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderWraper.start_data)
  return _internal_start_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FolderWraper::set_start_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.start_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.FolderWraper.start_data)
}
inline std::string* FolderWraper::mutable_start_data() {
  std::string* _s = _internal_mutable_start_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.FolderWraper.start_data)
  return _s;
}
inline const std::string& FolderWraper::_internal_start_data() const {
  return _impl_.start_data_.Get();
}
inline void FolderWraper::_internal_set_start_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FolderWraper::_internal_mutable_start_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.start_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FolderWraper::release_start_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.FolderWraper.start_data)
  if (!_internal_has_start_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.start_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FolderWraper::set_allocated_start_data(std::string* start_data) {
  if (start_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_data_.SetAllocated(start_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_data_.IsDefault()) {
    _impl_.start_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.FolderWraper.start_data)
}

// optional .protobuf_unittest.Folder Folder = 2;
inline bool FolderWraper::_internal_has_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.folder_ != nullptr);
  return value;
}
inline bool FolderWraper::has_folder() const {
  return _internal_has_folder();
}
inline void FolderWraper::clear_folder() {
  if (_impl_.folder_ != nullptr) _impl_.folder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::Folder& FolderWraper::_internal_folder() const {
  const ::protobuf_unittest::Folder* p = _impl_.folder_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::Folder&>(
      ::protobuf_unittest::_Folder_default_instance_);
}
inline const ::protobuf_unittest::Folder& FolderWraper::folder() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderWraper.Folder)
  return _internal_folder();
}
inline void FolderWraper::unsafe_arena_set_allocated_folder(
    ::protobuf_unittest::Folder* folder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.folder_);
  }
  _impl_.folder_ = folder;
  if (folder) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.FolderWraper.Folder)
}
inline ::protobuf_unittest::Folder* FolderWraper::release_folder() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::Folder* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::Folder* FolderWraper::unsafe_arena_release_folder() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.FolderWraper.Folder)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::Folder* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::Folder* FolderWraper::_internal_mutable_folder() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::Folder>(GetArenaForAllocation());
    _impl_.folder_ = p;
  }
  return _impl_.folder_;
}
inline ::protobuf_unittest::Folder* FolderWraper::mutable_folder() {
  ::protobuf_unittest::Folder* _msg = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.FolderWraper.Folder)
  return _msg;
}
inline void FolderWraper::set_allocated_folder(::protobuf_unittest::Folder* folder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.folder_;
  }
  if (folder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(folder);
    if (message_arena != submessage_arena) {
      folder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.FolderWraper.Folder)
}

// optional string end_data = 3;
inline bool FolderWraper::_internal_has_end_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FolderWraper::has_end_data() const {
  return _internal_has_end_data();
}
inline void FolderWraper::clear_end_data() {
  _impl_.end_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FolderWraper::end_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.FolderWraper.end_data)
  return _internal_end_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FolderWraper::set_end_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.end_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.FolderWraper.end_data)
}
inline std::string* FolderWraper::mutable_end_data() {
  std::string* _s = _internal_mutable_end_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.FolderWraper.end_data)
  return _s;
}
inline const std::string& FolderWraper::_internal_end_data() const {
  return _impl_.end_data_.Get();
}
inline void FolderWraper::_internal_set_end_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FolderWraper::_internal_mutable_end_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.end_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FolderWraper::release_end_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.FolderWraper.end_data)
  if (!_internal_has_end_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.end_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FolderWraper::set_allocated_end_data(std::string* end_data) {
  if (end_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_data_.SetAllocated(end_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_data_.IsDefault()) {
    _impl_.end_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.FolderWraper.end_data)
}

// -------------------------------------------------------------------

// LazyFolderLazyWraper

// optional string start_data = 1;
inline bool LazyFolderLazyWraper::_internal_has_start_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LazyFolderLazyWraper::has_start_data() const {
  return _internal_has_start_data();
}
inline void LazyFolderLazyWraper::clear_start_data() {
  _impl_.start_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LazyFolderLazyWraper::start_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.LazyFolderLazyWraper.start_data)
  return _internal_start_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LazyFolderLazyWraper::set_start_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.start_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.LazyFolderLazyWraper.start_data)
}
inline std::string* LazyFolderLazyWraper::mutable_start_data() {
  std::string* _s = _internal_mutable_start_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.LazyFolderLazyWraper.start_data)
  return _s;
}
inline const std::string& LazyFolderLazyWraper::_internal_start_data() const {
  return _impl_.start_data_.Get();
}
inline void LazyFolderLazyWraper::_internal_set_start_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_data_.Set(value, GetArenaForAllocation());
}
inline std::string* LazyFolderLazyWraper::_internal_mutable_start_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.start_data_.Mutable(GetArenaForAllocation());
}
inline std::string* LazyFolderLazyWraper::release_start_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.LazyFolderLazyWraper.start_data)
  if (!_internal_has_start_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.start_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LazyFolderLazyWraper::set_allocated_start_data(std::string* start_data) {
  if (start_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_data_.SetAllocated(start_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_data_.IsDefault()) {
    _impl_.start_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.LazyFolderLazyWraper.start_data)
}

// optional .protobuf_unittest.FolderLazy Folder = 2 [lazy_pack = true];
inline bool LazyFolderLazyWraper::_internal_has_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.folder_ != nullptr);
  return value;
}
inline bool LazyFolderLazyWraper::has_folder() const {
  return _internal_has_folder();
}
inline void LazyFolderLazyWraper::clear_folder() {
  if (_impl_.folder_ != nullptr) _impl_.folder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>& LazyFolderLazyWraper::_internal_folder() const {
  const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* p = _impl_.folder_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>&>(
      ::protobuf_unittest::_FolderLazy_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>& LazyFolderLazyWraper::folder() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.LazyFolderLazyWraper.Folder)
  return _internal_folder();
}
inline void LazyFolderLazyWraper::unsafe_arena_set_allocated_folder(
    ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* folder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.folder_);
  }
  _impl_.folder_ = folder;
  if (folder) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.LazyFolderLazyWraper.Folder)
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* LazyFolderLazyWraper::release_folder() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* LazyFolderLazyWraper::unsafe_arena_release_folder() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.LazyFolderLazyWraper.Folder)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* LazyFolderLazyWraper::_internal_mutable_folder() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>>(GetArenaForAllocation());
    _impl_.folder_ = p;
  }
  return _impl_.folder_;
}
inline ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* LazyFolderLazyWraper::mutable_folder() {
  ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* _msg = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.LazyFolderLazyWraper.Folder)
  return _msg;
}
inline void LazyFolderLazyWraper::set_allocated_folder(::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>* folder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.folder_;
  }
  if (folder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(folder);
    if (message_arena != submessage_arena) {
      folder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.LazyFolderLazyWraper.Folder)
}

// optional string end_data = 3;
inline bool LazyFolderLazyWraper::_internal_has_end_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LazyFolderLazyWraper::has_end_data() const {
  return _internal_has_end_data();
}
inline void LazyFolderLazyWraper::clear_end_data() {
  _impl_.end_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LazyFolderLazyWraper::end_data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.LazyFolderLazyWraper.end_data)
  return _internal_end_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LazyFolderLazyWraper::set_end_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.end_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.LazyFolderLazyWraper.end_data)
}
inline std::string* LazyFolderLazyWraper::mutable_end_data() {
  std::string* _s = _internal_mutable_end_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.LazyFolderLazyWraper.end_data)
  return _s;
}
inline const std::string& LazyFolderLazyWraper::_internal_end_data() const {
  return _impl_.end_data_.Get();
}
inline void LazyFolderLazyWraper::_internal_set_end_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_data_.Set(value, GetArenaForAllocation());
}
inline std::string* LazyFolderLazyWraper::_internal_mutable_end_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.end_data_.Mutable(GetArenaForAllocation());
}
inline std::string* LazyFolderLazyWraper::release_end_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.LazyFolderLazyWraper.end_data)
  if (!_internal_has_end_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.end_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LazyFolderLazyWraper::set_allocated_end_data(std::string* end_data) {
  if (end_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_data_.SetAllocated(end_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_data_.IsDefault()) {
    _impl_.end_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.LazyFolderLazyWraper.end_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_2epb_2eh
