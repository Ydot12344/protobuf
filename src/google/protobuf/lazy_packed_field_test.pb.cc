// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/lazy_packed_field_test.proto

#include "google/protobuf/lazy_packed_field_test.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace protobuf_unittest {
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytesize_)*/0} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR Folder::Folder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytesize_)*/0u} {}
struct FolderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FolderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FolderDefaultTypeInternal() {}
  union {
    Folder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FolderDefaultTypeInternal _Folder_default_instance_;
PROTOBUF_CONSTEXPR FolderLazy::FolderLazy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytesize_)*/0u} {}
struct FolderLazyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FolderLazyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FolderLazyDefaultTypeInternal() {}
  union {
    FolderLazy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FolderLazyDefaultTypeInternal _FolderLazy_default_instance_;
PROTOBUF_CONSTEXPR BigProtoLazy::BigProtoLazy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.folder_)*/nullptr} {}
struct BigProtoLazyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigProtoLazyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigProtoLazyDefaultTypeInternal() {}
  union {
    BigProtoLazy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigProtoLazyDefaultTypeInternal _BigProtoLazy_default_instance_;
PROTOBUF_CONSTEXPR BigProto::BigProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.folder_)*/nullptr} {}
struct BigProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigProtoDefaultTypeInternal() {}
  union {
    BigProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigProtoDefaultTypeInternal _BigProto_default_instance_;
PROTOBUF_CONSTEXPR FolderWraper::FolderWraper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.folder_)*/nullptr} {}
struct FolderWraperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FolderWraperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FolderWraperDefaultTypeInternal() {}
  union {
    FolderWraper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FolderWraperDefaultTypeInternal _FolderWraper_default_instance_;
PROTOBUF_CONSTEXPR LazyFolderLazyWraper::LazyFolderLazyWraper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.folder_)*/nullptr} {}
struct LazyFolderLazyWraperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LazyFolderLazyWraperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LazyFolderLazyWraperDefaultTypeInternal() {}
  union {
    LazyFolderLazyWraper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LazyFolderLazyWraperDefaultTypeInternal _LazyFolderLazyWraper_default_instance_;
}  // namespace protobuf_unittest
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto = nullptr;
const ::uint32_t TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::File, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::File, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::File, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::File, _impl_.extension_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::File, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::File, _impl_.bytesize_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Folder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Folder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Folder, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Folder, _impl_.files_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Folder, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Folder, _impl_.bytesize_),
    0,
    ~0u,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderLazy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderLazy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderLazy, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderLazy, _impl_.files_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderLazy, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderLazy, _impl_.bytesize_),
    0,
    ~0u,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProtoLazy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProtoLazy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProtoLazy, _impl_.start_data_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProtoLazy, _impl_.folder_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProtoLazy, _impl_.end_data_),
    0,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProto, _impl_.start_data_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProto, _impl_.folder_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BigProto, _impl_.end_data_),
    0,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderWraper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderWraper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderWraper, _impl_.start_data_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderWraper, _impl_.folder_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FolderWraper, _impl_.end_data_),
    0,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::LazyFolderLazyWraper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::LazyFolderLazyWraper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::LazyFolderLazyWraper, _impl_.start_data_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::LazyFolderLazyWraper, _impl_.folder_),
    PROTOBUF_FIELD_OFFSET(::protobuf_unittest::LazyFolderLazyWraper, _impl_.end_data_),
    0,
    2,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::protobuf_unittest::File)},
        { 16, 28, -1, sizeof(::protobuf_unittest::Folder)},
        { 32, 44, -1, sizeof(::protobuf_unittest::FolderLazy)},
        { 48, 59, -1, sizeof(::protobuf_unittest::BigProtoLazy)},
        { 62, 73, -1, sizeof(::protobuf_unittest::BigProto)},
        { 76, 87, -1, sizeof(::protobuf_unittest::FolderWraper)},
        { 90, 101, -1, sizeof(::protobuf_unittest::LazyFolderLazyWraper)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf_unittest::_File_default_instance_._instance,
    &::protobuf_unittest::_Folder_default_instance_._instance,
    &::protobuf_unittest::_FolderLazy_default_instance_._instance,
    &::protobuf_unittest::_BigProtoLazy_default_instance_._instance,
    &::protobuf_unittest::_BigProto_default_instance_._instance,
    &::protobuf_unittest::_FolderWraper_default_instance_._instance,
    &::protobuf_unittest::_LazyFolderLazyWraper_default_instance_._instance,
};
const char descriptor_table_protodef_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,google/protobuf/lazy_packed_field_test"
    ".proto\022\021protobuf_unittest\"\210\001\n\004File\022\021\n\004Na"
    "me\030\001 \001(\tH\000\210\001\001\022\026\n\tExtension\030\002 \001(\tH\001\210\001\001\022\021\n"
    "\004Path\030\003 \001(\tH\002\210\001\001\022\025\n\010ByteSize\030\004 \001(\005H\003\210\001\001B"
    "\007\n\005_NameB\014\n\n_ExtensionB\007\n\005_PathB\013\n\t_Byte"
    "Size\"\214\001\n\006Folder\022\021\n\004Name\030\001 \001(\tH\000\210\001\001\022&\n\005Fi"
    "les\030\002 \003(\0132\027.protobuf_unittest.File\022\021\n\004Pa"
    "th\030\003 \001(\tH\001\210\001\001\022\025\n\010ByteSize\030\004 \001(\rH\002\210\001\001B\007\n\005"
    "_NameB\007\n\005_PathB\013\n\t_ByteSize\"\225\001\n\nFolderLa"
    "zy\022\021\n\004Name\030\001 \001(\tH\000\210\001\001\022+\n\005Files\030\002 \003(\0132\027.p"
    "rotobuf_unittest.FileB\003\200\001\001\022\021\n\004Path\030\003 \001(\t"
    "H\001\210\001\001\022\025\n\010ByteSize\030\004 \001(\rH\002\210\001\001B\007\n\005_NameB\007\n"
    "\005_PathB\013\n\t_ByteSize\"\232\001\n\014BigProtoLazy\022\027\n\n"
    "start_data\030\001 \001(\tH\000\210\001\001\0223\n\006Folder\030\002 \001(\0132\031."
    "protobuf_unittest.FolderB\003\200\001\001H\001\210\001\001\022\025\n\010en"
    "d_data\030\003 \001(\tH\002\210\001\001B\r\n\013_start_dataB\t\n\007_Fol"
    "derB\013\n\t_end_data\"\221\001\n\010BigProto\022\027\n\nstart_d"
    "ata\030\001 \001(\tH\000\210\001\001\022.\n\006Folder\030\002 \001(\0132\031.protobu"
    "f_unittest.FolderH\001\210\001\001\022\025\n\010end_data\030\003 \001(\t"
    "H\002\210\001\001B\r\n\013_start_dataB\t\n\007_FolderB\013\n\t_end_"
    "data\"\225\001\n\014FolderWraper\022\027\n\nstart_data\030\001 \001("
    "\tH\000\210\001\001\022.\n\006Folder\030\002 \001(\0132\031.protobuf_unitte"
    "st.FolderH\001\210\001\001\022\025\n\010end_data\030\003 \001(\tH\002\210\001\001B\r\n"
    "\013_start_dataB\t\n\007_FolderB\013\n\t_end_data\"\246\001\n"
    "\024LazyFolderLazyWraper\022\027\n\nstart_data\030\001 \001("
    "\tH\000\210\001\001\0227\n\006Folder\030\002 \001(\0132\035.protobuf_unitte"
    "st.FolderLazyB\003\200\001\001H\001\210\001\001\022\025\n\010end_data\030\003 \001("
    "\tH\002\210\001\001B\r\n\013_start_dataB\t\n\007_FolderB\013\n\t_end"
    "_datab\006proto3"
};
static ::absl::once_flag descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto = {
    false,
    false,
    1133,
    descriptor_table_protodef_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto,
    "google/protobuf/lazy_packed_field_test.proto",
    &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto,
    file_level_enum_descriptors_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto(&descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto);
namespace protobuf_unittest {
// ===================================================================

class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(File, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bytesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.extension_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.bytesize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extension()) {
    _this->_impl_.extension_.Set(from._internal_extension(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bytesize_ = from._impl_.bytesize_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.extension_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.bytesize_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.extension_.Destroy();
  _impl_.path_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.File)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.extension_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.bytesize_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.File.Name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Extension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.File.Extension"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.File.Path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ByteSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bytesize(&has_bits);
          _impl_.bytesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* File::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.File)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string Name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.File.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string Extension = 2;
  if (_internal_has_extension()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.File.Extension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extension(), target);
  }

  // optional string Path = 3;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.File.Path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // optional int32 ByteSize = 4;
  if (_internal_has_bytesize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bytesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.File)
  return target;
}

::size_t File::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.File)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string Name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string Extension = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extension());
    }

    // optional string Path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional int32 ByteSize = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bytesize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }


void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<File*>(&to_msg);
  auto& from = static_cast<const File&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.File)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_extension(from._internal_extension());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bytesize_ = from._impl_.bytesize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extension_, lhs_arena,
      &other->_impl_.extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.bytesize_, other->_impl_.bytesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[0]);
}
// ===================================================================

class Folder::_Internal {
 public:
  using HasBits = decltype(std::declval<Folder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Folder, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bytesize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Folder::Folder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Folder)
}
Folder::Folder(const Folder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Folder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.bytesize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bytesize_ = from._impl_.bytesize_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Folder)
}

inline void Folder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.bytesize_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Folder::~Folder() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Folder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Folder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
}

void Folder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Folder::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Folder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.bytesize_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Folder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.Folder.Name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .protobuf_unittest.File Files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.Folder.Path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ByteSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bytesize(&has_bits);
          _impl_.bytesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Folder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Folder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string Name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.Folder.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .protobuf_unittest.File Files = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string Path = 3;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.Folder.Path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // optional uint32 ByteSize = 4;
  if (_internal_has_bytesize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bytesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Folder)
  return target;
}

::size_t Folder::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Folder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.File Files = 2;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string Name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string Path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional uint32 ByteSize = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytesize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Folder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Folder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Folder::GetClassData() const { return &_class_data_; }


void Folder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Folder*>(&to_msg);
  auto& from = static_cast<const Folder&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Folder)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bytesize_ = from._impl_.bytesize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Folder::CopyFrom(const Folder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Folder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Folder::IsInitialized() const {
  return true;
}

void Folder::InternalSwap(Folder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.bytesize_, other->_impl_.bytesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Folder::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[1]);
}
// ===================================================================

class FolderLazy::_Internal {
 public:
  using HasBits = decltype(std::declval<FolderLazy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FolderLazy, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bytesize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FolderLazy::FolderLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FolderLazy)
}
FolderLazy::FolderLazy(const FolderLazy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FolderLazy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.bytesize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bytesize_ = from._impl_.bytesize_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FolderLazy)
}

inline void FolderLazy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.bytesize_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FolderLazy::~FolderLazy() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.FolderLazy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FolderLazy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
}

void FolderLazy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FolderLazy::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.FolderLazy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.bytesize_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FolderLazy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.FolderLazy.Name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .protobuf_unittest.File Files = 2 [lazy_pack = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            if (ctx->IsDerivedFromReleasableBufferStream()) {
              _internal_add_files()->_InternalParse(ctx->GetBinaryMessageAsBuffersArray(&ptr));
            } else {
              _internal_add_files()->_InternalParse(ctx->GetBinaryMessage(&ptr));
            }
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.FolderLazy.Path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ByteSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bytesize(&has_bits);
          _impl_.bytesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FolderLazy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.FolderLazy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string Name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.FolderLazy.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .protobuf_unittest.File Files = 2 [lazy_pack = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string Path = 3;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.FolderLazy.Path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // optional uint32 ByteSize = 4;
  if (_internal_has_bytesize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bytesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.FolderLazy)
  return target;
}

::size_t FolderLazy::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.FolderLazy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.File Files = 2 [lazy_pack = true];
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string Name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string Path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional uint32 ByteSize = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytesize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FolderLazy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FolderLazy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FolderLazy::GetClassData() const { return &_class_data_; }


void FolderLazy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FolderLazy*>(&to_msg);
  auto& from = static_cast<const FolderLazy&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.FolderLazy)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bytesize_ = from._impl_.bytesize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FolderLazy::CopyFrom(const FolderLazy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.FolderLazy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderLazy::IsInitialized() const {
  return true;
}

void FolderLazy::InternalSwap(FolderLazy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.bytesize_, other->_impl_.bytesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FolderLazy::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[2]);
}
// ===================================================================

class BigProtoLazy::_Internal {
 public:
  using HasBits = decltype(std::declval<BigProtoLazy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BigProtoLazy, _impl_._has_bits_);
  static void set_has_start_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>& folder(const BigProtoLazy* msg);
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>&
BigProtoLazy::_Internal::folder(const BigProtoLazy* msg) {
  return *msg->_impl_.folder_;
}
BigProtoLazy::BigProtoLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BigProtoLazy)
}
BigProtoLazy::BigProtoLazy(const BigProtoLazy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigProtoLazy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_data()) {
    _this->_impl_.start_data_.Set(from._internal_start_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_end_data()) {
    _this->_impl_.end_data_.Set(from._internal_end_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_folder()) {
    _this->_impl_.folder_ = new ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>(*from._impl_.folder_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BigProtoLazy)
}

inline void BigProtoLazy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}
  };
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BigProtoLazy::~BigProtoLazy() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.BigProtoLazy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigProtoLazy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_data_.Destroy();
  _impl_.end_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.folder_;
}

void BigProtoLazy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigProtoLazy::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.BigProtoLazy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.folder_ != nullptr);
      _impl_.folder_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigProtoLazy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string start_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.BigProtoLazy.start_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .protobuf_unittest.Folder Folder = 2 [lazy_pack = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          if (ctx->IsDerivedFromReleasableBufferStream()) {
            _internal_mutable_folder()->_InternalParse(ctx->GetBinaryMessageAsBuffersArray(&ptr));
          } else {
            _internal_mutable_folder()->_InternalParse(ctx->GetBinaryMessage(&ptr));
          }
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string end_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_end_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.BigProtoLazy.end_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BigProtoLazy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.BigProtoLazy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string start_data = 1;
  if (_internal_has_start_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_data().data(), static_cast<int>(this->_internal_start_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.BigProtoLazy.start_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_data(), target);
  }

  // optional .protobuf_unittest.Folder Folder = 2 [lazy_pack = true];
  if (_internal_has_folder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::folder(this),
        _Internal::folder(this).GetCachedSize(), target, stream);
  }

  // optional string end_data = 3;
  if (_internal_has_end_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_data().data(), static_cast<int>(this->_internal_end_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.BigProtoLazy.end_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_end_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.BigProtoLazy)
  return target;
}

::size_t BigProtoLazy::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.BigProtoLazy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string start_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_data());
    }

    // optional string end_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_data());
    }

    // optional .protobuf_unittest.Folder Folder = 2 [lazy_pack = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.folder_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigProtoLazy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigProtoLazy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigProtoLazy::GetClassData() const { return &_class_data_; }


void BigProtoLazy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigProtoLazy*>(&to_msg);
  auto& from = static_cast<const BigProtoLazy&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.BigProtoLazy)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_start_data(from._internal_start_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_end_data(from._internal_end_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_folder()->::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::Folder>::MergeFrom(
          from._internal_folder());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigProtoLazy::CopyFrom(const BigProtoLazy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.BigProtoLazy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigProtoLazy::IsInitialized() const {
  return true;
}

void BigProtoLazy::InternalSwap(BigProtoLazy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_data_, lhs_arena,
      &other->_impl_.start_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_data_, lhs_arena,
      &other->_impl_.end_data_, rhs_arena
  );
  swap(_impl_.folder_, other->_impl_.folder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigProtoLazy::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[3]);
}
// ===================================================================

class BigProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BigProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BigProto, _impl_._has_bits_);
  static void set_has_start_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::Folder& folder(const BigProto* msg);
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::Folder&
BigProto::_Internal::folder(const BigProto* msg) {
  return *msg->_impl_.folder_;
}
BigProto::BigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BigProto)
}
BigProto::BigProto(const BigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_data()) {
    _this->_impl_.start_data_.Set(from._internal_start_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_end_data()) {
    _this->_impl_.end_data_.Set(from._internal_end_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_folder()) {
    _this->_impl_.folder_ = new ::protobuf_unittest::Folder(*from._impl_.folder_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BigProto)
}

inline void BigProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}
  };
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BigProto::~BigProto() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.BigProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_data_.Destroy();
  _impl_.end_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.folder_;
}

void BigProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.BigProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.folder_ != nullptr);
      _impl_.folder_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string start_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.BigProto.start_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .protobuf_unittest.Folder Folder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_folder(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string end_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_end_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.BigProto.end_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BigProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.BigProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string start_data = 1;
  if (_internal_has_start_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_data().data(), static_cast<int>(this->_internal_start_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.BigProto.start_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_data(), target);
  }

  // optional .protobuf_unittest.Folder Folder = 2;
  if (_internal_has_folder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::folder(this),
        _Internal::folder(this).GetCachedSize(), target, stream);
  }

  // optional string end_data = 3;
  if (_internal_has_end_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_data().data(), static_cast<int>(this->_internal_end_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.BigProto.end_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_end_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.BigProto)
  return target;
}

::size_t BigProto::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.BigProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string start_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_data());
    }

    // optional string end_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_data());
    }

    // optional .protobuf_unittest.Folder Folder = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.folder_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigProto::GetClassData() const { return &_class_data_; }


void BigProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigProto*>(&to_msg);
  auto& from = static_cast<const BigProto&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.BigProto)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_start_data(from._internal_start_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_end_data(from._internal_end_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_folder()->::protobuf_unittest::Folder::MergeFrom(
          from._internal_folder());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigProto::CopyFrom(const BigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.BigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigProto::IsInitialized() const {
  return true;
}

void BigProto::InternalSwap(BigProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_data_, lhs_arena,
      &other->_impl_.start_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_data_, lhs_arena,
      &other->_impl_.end_data_, rhs_arena
  );
  swap(_impl_.folder_, other->_impl_.folder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigProto::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[4]);
}
// ===================================================================

class FolderWraper::_Internal {
 public:
  using HasBits = decltype(std::declval<FolderWraper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FolderWraper, _impl_._has_bits_);
  static void set_has_start_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::Folder& folder(const FolderWraper* msg);
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::Folder&
FolderWraper::_Internal::folder(const FolderWraper* msg) {
  return *msg->_impl_.folder_;
}
FolderWraper::FolderWraper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FolderWraper)
}
FolderWraper::FolderWraper(const FolderWraper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FolderWraper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_data()) {
    _this->_impl_.start_data_.Set(from._internal_start_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_end_data()) {
    _this->_impl_.end_data_.Set(from._internal_end_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_folder()) {
    _this->_impl_.folder_ = new ::protobuf_unittest::Folder(*from._impl_.folder_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FolderWraper)
}

inline void FolderWraper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}
  };
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FolderWraper::~FolderWraper() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.FolderWraper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FolderWraper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_data_.Destroy();
  _impl_.end_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.folder_;
}

void FolderWraper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FolderWraper::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.FolderWraper)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.folder_ != nullptr);
      _impl_.folder_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FolderWraper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string start_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.FolderWraper.start_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .protobuf_unittest.Folder Folder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_folder(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string end_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_end_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.FolderWraper.end_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FolderWraper::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.FolderWraper)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string start_data = 1;
  if (_internal_has_start_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_data().data(), static_cast<int>(this->_internal_start_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.FolderWraper.start_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_data(), target);
  }

  // optional .protobuf_unittest.Folder Folder = 2;
  if (_internal_has_folder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::folder(this),
        _Internal::folder(this).GetCachedSize(), target, stream);
  }

  // optional string end_data = 3;
  if (_internal_has_end_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_data().data(), static_cast<int>(this->_internal_end_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.FolderWraper.end_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_end_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.FolderWraper)
  return target;
}

::size_t FolderWraper::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.FolderWraper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string start_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_data());
    }

    // optional string end_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_data());
    }

    // optional .protobuf_unittest.Folder Folder = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.folder_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FolderWraper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FolderWraper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FolderWraper::GetClassData() const { return &_class_data_; }


void FolderWraper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FolderWraper*>(&to_msg);
  auto& from = static_cast<const FolderWraper&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.FolderWraper)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_start_data(from._internal_start_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_end_data(from._internal_end_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_folder()->::protobuf_unittest::Folder::MergeFrom(
          from._internal_folder());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FolderWraper::CopyFrom(const FolderWraper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.FolderWraper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderWraper::IsInitialized() const {
  return true;
}

void FolderWraper::InternalSwap(FolderWraper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_data_, lhs_arena,
      &other->_impl_.start_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_data_, lhs_arena,
      &other->_impl_.end_data_, rhs_arena
  );
  swap(_impl_.folder_, other->_impl_.folder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FolderWraper::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[5]);
}
// ===================================================================

class LazyFolderLazyWraper::_Internal {
 public:
  using HasBits = decltype(std::declval<LazyFolderLazyWraper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LazyFolderLazyWraper, _impl_._has_bits_);
  static void set_has_start_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>& folder(const LazyFolderLazyWraper* msg);
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>&
LazyFolderLazyWraper::_Internal::folder(const LazyFolderLazyWraper* msg) {
  return *msg->_impl_.folder_;
}
LazyFolderLazyWraper::LazyFolderLazyWraper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.LazyFolderLazyWraper)
}
LazyFolderLazyWraper::LazyFolderLazyWraper(const LazyFolderLazyWraper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LazyFolderLazyWraper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_data()) {
    _this->_impl_.start_data_.Set(from._internal_start_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_end_data()) {
    _this->_impl_.end_data_.Set(from._internal_end_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_folder()) {
    _this->_impl_.folder_ = new ::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>(*from._impl_.folder_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.LazyFolderLazyWraper)
}

inline void LazyFolderLazyWraper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_data_){}
    , decltype(_impl_.end_data_){}
    , decltype(_impl_.folder_){nullptr}
  };
  _impl_.start_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LazyFolderLazyWraper::~LazyFolderLazyWraper() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.LazyFolderLazyWraper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LazyFolderLazyWraper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_data_.Destroy();
  _impl_.end_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.folder_;
}

void LazyFolderLazyWraper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LazyFolderLazyWraper::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.LazyFolderLazyWraper)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.folder_ != nullptr);
      _impl_.folder_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LazyFolderLazyWraper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string start_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.LazyFolderLazyWraper.start_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .protobuf_unittest.FolderLazy Folder = 2 [lazy_pack = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          if (ctx->IsDerivedFromReleasableBufferStream()) {
            _internal_mutable_folder()->_InternalParse(ctx->GetBinaryMessageAsBuffersArray(&ptr));
          } else {
            _internal_mutable_folder()->_InternalParse(ctx->GetBinaryMessage(&ptr));
          }
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string end_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_end_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protobuf_unittest.LazyFolderLazyWraper.end_data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LazyFolderLazyWraper::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.LazyFolderLazyWraper)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string start_data = 1;
  if (_internal_has_start_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_data().data(), static_cast<int>(this->_internal_start_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.LazyFolderLazyWraper.start_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_data(), target);
  }

  // optional .protobuf_unittest.FolderLazy Folder = 2 [lazy_pack = true];
  if (_internal_has_folder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::folder(this),
        _Internal::folder(this).GetCachedSize(), target, stream);
  }

  // optional string end_data = 3;
  if (_internal_has_end_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_data().data(), static_cast<int>(this->_internal_end_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.LazyFolderLazyWraper.end_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_end_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.LazyFolderLazyWraper)
  return target;
}

::size_t LazyFolderLazyWraper::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.LazyFolderLazyWraper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string start_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_data());
    }

    // optional string end_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_data());
    }

    // optional .protobuf_unittest.FolderLazy Folder = 2 [lazy_pack = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.folder_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LazyFolderLazyWraper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LazyFolderLazyWraper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LazyFolderLazyWraper::GetClassData() const { return &_class_data_; }


void LazyFolderLazyWraper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LazyFolderLazyWraper*>(&to_msg);
  auto& from = static_cast<const LazyFolderLazyWraper&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.LazyFolderLazyWraper)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_start_data(from._internal_start_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_end_data(from._internal_end_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_folder()->::PROTOBUF_NAMESPACE_ID::TLazyField<::protobuf_unittest::FolderLazy>::MergeFrom(
          from._internal_folder());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LazyFolderLazyWraper::CopyFrom(const LazyFolderLazyWraper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.LazyFolderLazyWraper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LazyFolderLazyWraper::IsInitialized() const {
  return true;
}

void LazyFolderLazyWraper::InternalSwap(LazyFolderLazyWraper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_data_, lhs_arena,
      &other->_impl_.start_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_data_, lhs_arena,
      &other->_impl_.end_data_, rhs_arena
  );
  swap(_impl_.folder_, other->_impl_.folder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LazyFolderLazyWraper::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_getter, &descriptor_table_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2flazy_5fpacked_5ffield_5ftest_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::File*
Arena::CreateMaybeMessage< ::protobuf_unittest::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::File >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Folder*
Arena::CreateMaybeMessage< ::protobuf_unittest::Folder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Folder >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FolderLazy*
Arena::CreateMaybeMessage< ::protobuf_unittest::FolderLazy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FolderLazy >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BigProtoLazy*
Arena::CreateMaybeMessage< ::protobuf_unittest::BigProtoLazy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BigProtoLazy >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BigProto*
Arena::CreateMaybeMessage< ::protobuf_unittest::BigProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BigProto >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FolderWraper*
Arena::CreateMaybeMessage< ::protobuf_unittest::FolderWraper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FolderWraper >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::LazyFolderLazyWraper*
Arena::CreateMaybeMessage< ::protobuf_unittest::LazyFolderLazyWraper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::LazyFolderLazyWraper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
